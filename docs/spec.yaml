openapi: 3.0.1
info:
  version: 1.0.0
  title: Delilah Resto
  description: Delilah API
servers: 
  - url: http://localhost:3000
    description: Servidor local
tags:
  - name:  login
    description: Login
  - name: users
    description: Operaciones sobre usuarios
  - name: products
    description: Operaciones sobre producto
  - name: orders
    description: Operaciones sobre pedidos

paths:
      
  /users:
    get:
      tags:
      - users
      description: Permite obtener datos de usuarios
      responses:
        200: 
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'

        404:
          description: Request not found
          content: 
            application/json: 
              schema:
                type: string
                example: {"Message:":"Error 404. Page or requet not found."}
    post:
      tags:
      - users
      description: Crea usuarios en la base de datos
      parameters:
          - name: User
            in: query
            description: Crear un nuevo usuario en la base de datos
            schema:
              $ref: '#/components/schemas/users'
              
      responses:
          200:
            description: Successful request
            content:
              application/json:
                schema:
                  type: string
                  example: {"Message:":"Successful request"}
          404:
            description: Request not found
            content: 
              application/json: 
                schema:
                  type: string
                  example: {"Message:":"Error 404. Page or requet not found."}
  /login:
    post:
      tags:
        - login
      description: Ingresar con un usuario ya registrado
      parameters:
          - name: user_id
            in: query
            description: Ingresar con un usuario ya registrado
            schema:
              $ref: '#/components/schemas/login'
              
      responses:
          200:
            description: Successful request
            content:
              application/json:
                schema:
                  type: string
                  example: {"Message:":"Successful request"}
          404:
            description: Request not found
            content: 
              application/json: 
                schema:
                  type: string
                  example: {"Message:":"Error 404. Page or requet not found."}
  /users/{user_id}:
    get:
      tags:
      - users
      description: Obtener informaci贸n de un usuario ingresando su ID
      parameters:
        - in: path
          name: user_id
          required: true
          description: ID de usuario
          schema:
            type: integer
            example: 123
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
                
        404:
          description: Request not found
          content: 
            application/json: 
              schema:
                type: string
                example: {"Message:":"Error 404. Page or requet not found."}
                
  /users/me:
    get:
      tags:
      - users
      description: Obtener informaci贸n de su usuario
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
                
        404:
          description: Request not found
          content: 
            application/json: 
              schema:
                type: string
                example: {"Message:":"Error 404. Page or requet not found."}
    
  /products:
    get:
      tags:
      - products
      description: Permite obtener datos de productos
      responses:
        200: 
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products'
                
                    
        404:
          description: Request not found
          content: 
            application/json: 
              schema:
                type: string
                example: {"Message:":"Error 404. Page or requet not found."}
    post:
      tags:
      - products
      description: Crea productos en la base de datos
      parameters:
        - name: Product
          in: query
          description: Crear un nuevo producto en la base de datos
          schema:
            $ref: '#/components/schemas/products'
            
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                type: string
                example: {"Message:":"Successful request"}
        404:
          description: Request not found
          content: 
            application/json: 
              schema:
                type: string
                example: {"Message:":"Error 404. Page or requet not found."}
  /products/{prod_id}:
    get:
      tags:
      - products
      description: Obtener informaci贸n de un producto ingresando su ID
      parameters:
        - in: path
          name: prod_id
          required: true
          description: ID de producto
          schema:
            type: number
            example: 12
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products'
                
        404:
          description: Request not found
          content: 
            application/json: 
              schema:
                type: string
                example: {"Message:":"Error 404. Page or requet not found."}
    put:
      tags:
      - products
      description: Permite modificar productos en la base de datos
      parameters:
        - in: path
          name: prod_id
          required: true
          description: ID de producto
          schema:
            type: number
            minimum: 1
            example: 12
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products'
                        
        404:
          description: Request not found
          content: 
            application/json: 
              schema:
                type: string
                example: {"Message:":"Error 404. Page or requet not found."}
    delete:
      tags:
      - products
      description: Permite eliminar productos en la base de datos
      parameters:
        - in: path
          name: prod_id
          required: true
          description: ID de producto
          schema:
            type: number
            minimum: 1
            example: 12
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/products'
                        
        404:
          description: Request not found
          content: 
            application/json: 
              schema:
                type: string
                example: {"Message:":"Error 404. Page or requet not found."}
  /orders:
    get:
      tags:
      - orders
      description: Permite obtener datos de pedidos
      responses:
        200: 
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orders'
                    
        404:
          description: Request not found
          content: 
            application/json: 
              schema:
                type: string
                example: {"Message:":"Error 404. Page or requet not found."}
    post:
      tags:
      - orders
      description: Crea pedidos en la base de datos
      parameters:
        - name: pedido_id
          in: query
          description: Crear un nuevo pedido en la base de datos
          schema:
            $ref: '#/components/schemas/orders'
            
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                type: string
                example: {"Message:":"Successful request"}
        404:
          description: Request not found
          content: 
            application/json: 
              schema:
                type: string
                example: {"Message:":"Error 404. Page or requet not found."}
  
  /orders/{order_id}:
    get:
        tags:
        - orders
        description: Obtener informaci贸n de un pedido ingresando su ID
        parameters:
          - in: path
            name: order_id
            required: true
            description: ID de pedido
            schema:
              type: number
              example: 56
        responses:
          200:
            description: Successful request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/orders'
                  
          404:
            description: Request not found
            content: 
              application/json: 
                schema:
                  type: string
                  example: {"Message:":"Error 404. Page or requet not found."}
    put:
      tags:
      - orders
      description: Permite editar el pedido en la base de datos
      parameters:
          - in: path
            name: order_id
            required: true
            description: ID de pedido
            schema:
              type: number
              example: 56
      responses:
          200:
            description: Successful request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/orders'
                  
          404:
            description: Request not found
            content: 
              application/json: 
                schema:
                  type: string
                  example: {"Message:":"Error 404. Page or requet not found."}
    delete:
      tags:
      - orders
      description: Permite eliminar el pedido en la base de datos
      parameters:
          - in: path
            name: order_id
            required: true
            description: ID de pedido
            schema:
              type: number
              example: 56
      responses:
          200:
            description: Successful request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/orders'
                  
          404:
            description: Request not found
            content: 
              application/json: 
                schema:
                  type: string
                  example: {"Message:":"Error 404. Page or requet not found."}
  
components:
  schemas:
    login:
      type: object
      properties:
                  user_name:
                    type: string
                    description: Nombre de usuario
                    example: queen_freddie
                  email:
                    type: string
                    description: Email del usuario
                    example: freddiemercury@gmail.com
                  pass_user:
                    type: string
                    description: Contrase帽a del usuario
                    example: pass123
    users:
      type: object
      properties:
                  user_id:
                    type: integer
                    description: ID de usuario
                    example: 123
                  user_name:
                    type: string
                    description: Nombre de usuario
                    example: queen_freddie
                  full_name:
                    type: string
                    description: Nombre completo del usuario
                    example: Freddie Mercury
                  email:
                    type: string
                    description: Email del usuario
                    example: freddiemercury@gmail.com
                  telephone:
                    type: integer
                    description: Telefono de usuario
                    example: 44 7712345678
                  address:
                    type: string
                    description: Direccion de usuario
                    example: 1 Logan PIKensington, London W8 6DE, UK
                  pass_user:
                    type: string
                    description: Contrase帽a del usuario
                    example: pass123
    products:
      type: object
      properties:
                    prod_id:
                      type: integer
                      description: ID de producto
                      example: 12
                    prod_name:
                      type: string
                      description: Nombre de producto
                      example: Hamburguesa de garbanzos
                    prod_price:
                      type: integer
                      description: Precio del producto
                      example: 215
    orders:
      type: object
      properties:
                    order_id:
                      type: integer
                      format: int64
                      description: ID del pedido
                      example: 56
                    order_date:
                      type: string
                      format: date-time
                      description: Fecha del pedido
                      example: 12/03/2020
                    user_id:
                      type: integer
                      format: int64
                      description: ID del usuario que realiz贸 el pedido
                      example: 123
                    payment_id:
                      type: integer
                      format: int32
                      description: ID de forma de pago
                      example: 2
                    status_id:
                      type: integer
                      description: Order Status
                      example: 2
                    order_total:
                      type: integer
                      format: int64
                      description: Precio total a pagar
                      example: 356
